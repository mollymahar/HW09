#!/usr/bin/env python# Exercise: Presidents  # Write a program to:# (1) Load the data from presidents.txt into a dictionary.# (2) Print the years the greatest and least number of presidents were alive.#     (between 1732 and 2015 (inclusive))#     Ex. #       'least = 2015'#       'most = 2015'# Bonus: Confirm there are no ties.############################################################################### Importsimport re# Bodydef get_data():	with open('presidents.txt') as f:		presidents_list = re.split("[\\r]", f.read())		return presidents_list 		# returns a list with each element a long stringdef create_dict(l):	prez_dict = {}	for elem in l: 				# create dict with name and a list of two numbers		value = elem.split(",")		prez_dict[value[0]] = [value[1], value[2]]	return prez_dictdef is_alive(l, year):	"""Takes two arguments: a list (of birth and death years) plus a year, and returns whether 	or not that president was alive on that year."""	# is_alive([1732, 1799], 1780) returns True	if l[1] == 'None':		return int(l[0]) <= int(year)	else:		return int(l[0]) <= int(year) <= int(l[1])def num_alive_per_year():	"""Takes no arguments, returns a dictionary with year as the key and	a count of live presidents as the value."""	presidents = create_dict(get_data())	count_by_year = {key:0 for key in range(1732, 2016)}	# print count_by_year	for year in count_by_year:		# print year		for president in presidents:			if is_alive(presidents[president], year):				count_by_year[year] = count_by_year.get(year,0) + 1	return count_by_yeardef invert_dict(d):	"""Takes a dictionary, creates a list of tuples, and returns a sorted list."""	x_ = [(i, y) for (y,i) in d.items()]	return x_def most_alive(l):	"""Takes a list and prints the highest value of that list."""	most = max(l)[1]	print "most:", mostdef least_alive(l):	"""Takes a dictionary and prints the lowest value of that list."""	least = min(l)[1]	print "least:", least##############################################################################def main():  # CALL YOUR FUNCTION BELOW	year_by_count = invert_dict(num_alive_per_year())	most_alive(year_by_count)	least_alive(year_by_count)if __name__ == '__main__':    main()